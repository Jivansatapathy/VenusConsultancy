#!/bin/bash

# Venus Hiring Platform - Pre-commit Security Hook
# This hook runs security checks before allowing commits

echo "üîí Running pre-commit security checks..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

# Check for .env files in staged changes
ENV_FILES=$(git diff --cached --name-only | grep -E "\.env$|\.env\." || true)
if [ -n "$ENV_FILES" ]; then
    print_error "BLOCKED: Attempting to commit .env files:"
    echo "$ENV_FILES"
    echo ""
    print_error "Environment files should never be committed to version control!"
    print_warning "Please:"
    echo "  1. Remove .env files from staging: git reset HEAD <file>"
    echo "  2. Add .env to .gitignore if not already present"
    echo "  3. Use .env.example for documentation"
    exit 1
fi

# Check for secret files in staged changes
SECRET_FILES=$(git diff --cached --name-only | grep -E "\.(pem|key|p12|pfx|crt|cer|der|p8|rsa|dsa|ec|ed25519|ed448|x509|pkcs12|pkcs8|spki|ssh|gpg|asc|pgp|keystore|jks)$" || true)
if [ -n "$SECRET_FILES" ]; then
    print_error "BLOCKED: Attempting to commit secret files:"
    echo "$SECRET_FILES"
    echo ""
    print_error "Secret files should never be committed to version control!"
    print_warning "Please remove these files from staging and add them to .gitignore"
    exit 1
fi

# Check for hardcoded secrets in staged changes
STAGED_FILES=$(git diff --cached --name-only | grep -E "\.(js|ts|jsx|tsx|json|yaml|yml|env|config)$" || true)

if [ -n "$STAGED_FILES" ]; then
    SECRETS_FOUND=false
    
    # Common secret patterns
    SECRET_PATTERNS=(
        "dev_access_secret_change_me"
        "dev_refresh_secret_change_me"
        "admin123"
        "recruiter123"
        "password123"
        "123456"
        "BEGIN.*PRIVATE.*KEY"
        "BEGIN.*RSA.*PRIVATE.*KEY"
        "AKIA[0-9A-Z]{16}"
        "aws_secret_access_key"
    )
    
    for file in $STAGED_FILES; do
        for pattern in "${SECRET_PATTERNS[@]}"; do
            if git show ":$file" | grep -i -E "$pattern" > /dev/null 2>&1; then
                SECRETS_FOUND=true
                print_error "BLOCKED: Potential secret found in $file:"
                git show ":$file" | grep -i -E "$pattern" | head -3
                echo ""
            fi
        done
    done
    
    if [ "$SECRETS_FOUND" = true ]; then
        print_error "Hardcoded secrets detected in staged files!"
        print_warning "Please:"
        echo "  1. Remove hardcoded secrets from your code"
        echo "  2. Use environment variables instead"
        echo "  3. Check .env.example for proper configuration"
        exit 1
    fi
fi

# Check for large files (>10MB)
LARGE_FILES=$(git diff --cached --name-only | xargs -I {} sh -c 'if [ -f "{}" ]; then if [ $(stat -c%s "{}" 2>/dev/null || stat -f%z "{}" 2>/dev/null || echo 0) -gt 10485760 ]; then echo "{}"; fi; fi' || true)
if [ -n "$LARGE_FILES" ]; then
    print_warning "Large files detected (>10MB):"
    echo "$LARGE_FILES"
    print_warning "Consider using Git LFS for large files"
fi

# Run the security scan script if it exists
if [ -f "scripts/scan-secrets.sh" ]; then
    print_success "Running comprehensive security scan..."
    if bash scripts/scan-secrets.sh; then
        print_success "Security scan passed"
    else
        print_error "Security scan failed - please fix issues before committing"
        exit 1
    fi
fi

print_success "Pre-commit security checks passed!"
echo ""
print_warning "Remember to:"
echo "  - Never commit secrets or credentials"
echo "  - Use environment variables for sensitive data"
echo "  - Regularly rotate secrets and passwords"
echo "  - Review your changes before committing"

exit 0
